using System;
using System.Collections.Generic;
using System.Linq;
using ASC.Common.Data.Sql;
using ASC.Common.Data.Sql.Expressions;
using ASC.Core;
using ASC.Core.Tenants;
using ASC.Projects.Core.DataInterfaces;
using ASC.Projects.Core.Domain;
using ASC.Projects.Core.Domain.Reports;

namespace ASC.Projects.Data.DAO
{
    class ReportDao : BaseDao, IReportDao
    {
        private const string table = "projects_report_template";
        private readonly string[] columns = new[] { "id", "type", "name", "filter", "cron", "create_by", "create_on", "tenant_id", "auto" };


        public ReportDao(string dbId, int tenantID)
            : base(dbId, tenantID)
        {

        }


        public List<ReportTemplate> GetTemplates(Guid userId)
        {
            return DbManager
                .ExecuteList(Query(table).Select(columns).Where("create_by", userId.ToString()).OrderBy("name", true))
                .ConvertAll(r => ToTemplate(r));
        }

        public List<ReportTemplate> GetAutoTemplates()
        {
            return DbManager
                .ExecuteList(new SqlQuery(table).Select(columns).Where("auto", true).OrderBy("tenant_id", true))
                .ConvertAll(r => ToTemplate(r));
        }

        public ReportTemplate GetTemplate(int id)
        {
            return DbManager
                .ExecuteList(Query(table).Select(columns).Where("id", id))
                .ConvertAll(r => ToTemplate(r))
                .SingleOrDefault();
        }

        public ReportTemplate SaveTemplate(ReportTemplate template)
        {
            if (template == null) throw new ArgumentNullException("template");
            if (template.CreateOn == default(DateTime)) template.CreateOn = DateTime.Now;
            if (string.IsNullOrEmpty(template.CreateBy)) template.CreateBy = SecurityContext.CurrentAccount.ID.ToString();

            var insert = new SqlInsert(table, true)
                .InColumns(columns)
                .Values(
                    template.Id,
                    template.ReportType,
                    template.Name,
                    template.Filter.ToXml(),
                    template.Cron,
                    template.CreateBy,
                    TenantUtil.DateTimeToUtc(template.CreateOn),
                    Tenant,
                    template.AutoGenerated)
                .Identity(0, 0, true);
            template.Id = DbManager.ExecuteScalar<int>(insert);
            return template;
        }

        public void DeleteTemplate(int id)
        {
            DbManager.ExecuteNonQuery(Delete(table).Where("id", id));
        }


        public IList<object[]> BuildMilestonesReport(ReportFilter filter)
        {
            IntersectTagsAndProjects(filter);

            var query = new SqlQuery()
                .From("projects_projects p")
                .InnerJoin("projects_milestones m", Exp.EqColumns("p.id", "m.project_id"))
                .Select("p.id", "p.title", "m.id", "m.title", "m.deadline", "m.status")
                .Where("m.status", MilestoneStatus.Open)
                .Where("p.tenant_id", Tenant)
                .Where("m.tenant_id", Tenant)
                .OrderBy("p.title", true)
                .OrderBy("m.deadline", false);
            if (filter.HasProjectIds)
            {
                query.Where(Exp.In("p.id", filter.ProjectIds));
            }
            if (filter.GetFromDate() != DateTime.MinValue)
            {
                query.Where(Exp.Ge("m.deadline", filter.GetFromDate()));
            }
            if (filter.GetToDate() != DateTime.MaxValue)
            {
                query.Where(Exp.Le("m.deadline", filter.GetToDate()));
            }

            return DbManager
                .ExecuteList(query)
                .ConvertAll(r => new object[] { Convert.ToInt32(r[0]), (string)r[1], Convert.ToInt32(r[2]), (string)r[3], ((DateTime)r[4]).ToString("d"), ToString((MilestoneStatus)Convert.ToInt32(r[5])) });
        }

        public IList<object[]> BuildUsersWorkReport(ReportFilter filter)
        {
            IntersectTagsAndProjects(filter);

            var query = new SqlQuery("projects_tasks t")
                .LeftOuterJoin("projects_projects p", Exp.EqColumns("t.project_id", "p.id"))
                .Select("t.responsible_id", "t.id", "t.title", "p.id", "p.title")
                .Where("t.tenant_id", Tenant)
                .Where("t.status", TaskStatus.Closed)
                .Where(Exp.Between("t.last_modified_on", filter.GetFromDate(true), filter.GetToDate(true)))
                .OrderBy("t.sort_order", true);
            if (filter.HasProjectIds)
            {
                query.Where(Exp.In("p.id", filter.ProjectIds));
            }
            if (filter.HasUserId)
            {
                query.Where(Exp.In("t.responsible_id", filter.GetUserIds()));
            }
            else
            {
                query.Where(!Exp.Eq("t.responsible_id", Guid.Empty.ToString()));
            }

            return DbManager
                .ExecuteList(query)
                .ConvertAll(r => new object[] { ToGuid(r[0]), Convert.ToInt32(r[1]), (string)r[2], Convert.ToInt32(r[3]), (string)r[4] });
        }

        public IList<object[]> BuildUsersStatisticsReport(ReportFilter filter)
        {
            var query = Query("projects_tasks")
                .Select("responsible_id")
                .SelectSum("case status when 0 then 1 else 0 end")
                .SelectSum("case status when 1 then 1 else 0 end")
                .SelectSum("case status when 2 then 1 else 0 end")
                .GroupBy(1);
            if (filter.HasUserId)
            {
                query.Where(Exp.In("responsible_id", filter.GetUserIds()));
            }
            else
            {
                query.Where(!Exp.Eq("responsible_id", Guid.Empty.ToString()));
            }
            if (filter.HasProjectIds)
            {
                query.Where(Exp.In("project_id", filter.ProjectIds));
            }
            return DbManager
                .ExecuteList(query)
                .ConvertAll(r => new object[] { ToGuid(r[0]), Convert.ToInt64(r[1]), Convert.ToInt64(r[2]), Convert.ToInt64(r[3]) });
        }

        public IList<object[]> BuildTaskListReport(ReportFilter filter)
        {
            IntersectTagsAndProjects(filter);

            var query = new SqlQuery("projects_tasks t")
                .LeftOuterJoin("projects_projects p", Exp.EqColumns("t.project_id", "p.id"))
                .LeftOuterJoin("projects_milestones m", Exp.EqColumns("t.milestone_id", "m.id"))
                .Select("p.id", "p.title")
                .Select("m.id", "m.title", "m.deadline", "m.status")
                .Select("t.id", "t.title", "t.responsible_id", "t.status", "t.deadline", "substring(t.description, 0, 510)")
                .Where("t.tenant_id", Tenant)
                .OrderBy("p.title", true)
                .OrderBy("p.id", true)
                
                .OrderBy("m.status", true)
                .OrderBy("m.deadline", true)
                .OrderBy("m.title", true)
                .OrderBy("m.id", true)

                .OrderBy("t.sort_order", false)
                .OrderBy("t.status", true)
                .OrderBy("t.priority", true)
                .OrderBy("t.create_on", true);


            if (filter.HasProjectIds)
            {
                query.Where(Exp.In("p.id", filter.ProjectIds));
            }
            if (filter.HasTaskStatuses)
            {
                query.Where(Exp.In("t.status", filter.TaskStatuses));
                if (!filter.TaskStatuses.Contains(TaskStatus.Unclassified))
                {
                    query.Where(!Exp.Eq("t.responsible_id", Guid.Empty.ToString()));
                }
            }
            if (filter.HasUserId)
            {
                query.Where(Exp.In("t.responsible_id", filter.GetUserIds()));
            }
            if (filter.GetToDate() != DateTime.MaxValue)
            {
                query.Where(Exp.Between("t.deadline", new DateTime(1900, 1, 1), filter.GetToDate()));
            }

            return DbManager
                .ExecuteList(query)
                .ConvertAll(r => new object[] { Convert.ToInt32(r[0]), (string)r[1], r[2] != null ? Convert.ToInt32(r[2]) : 0, (string)r[3], r[4] != null ? ((DateTime)r[4]).ToString("d") : null, 
                    r[5] != null ? Convert.ToInt32(r[5]) : -1, Convert.ToInt32(r[6]), (string)r[7], ToGuid(r[8]), (TaskStatus)Convert.ToInt32(r[9]),
                    r[10] != null && !DateTime.MinValue.Equals(r[10]) ? ((DateTime)r[10]).ToString("d") : null, ASC.Common.Utils.HtmlUtil.GetText((string)r[11], 500) });
        }

        public IList<object[]> BuildTimeReport(ReportFilter filter)
        {
            var query = new SqlQuery("projects_time_tracking t")
                .LeftOuterJoin("projects_tasks r", Exp.EqColumns("t.relative_task_id", "r.id"))
                .Select("t.person_id")
                .Select("t.project_id")
                .Select("t.relative_task_id")
                .Select("r.title")
                .SelectSum("t.hours")
                .Where("t.tenant_id", Tenant)
                .Where(!Exp.Eq("t.relative_task_id", 0))
                .Where(Exp.Between("t.date", filter.GetFromDate(true), filter.GetToDate(true)))
                .GroupBy(1, 2, 3, 4);
            if (filter.HasProjectIds)
            {
                query.Where(Exp.In("t.project_id", filter.ProjectIds));
            }
            if (filter.HasUserId)
            {
                query.Where(Exp.In("t.person_id", filter.GetUserIds()));
            }

            return DbManager
                .ExecuteList(query)
                .ConvertAll(r => new object[] { ToGuid(r[0]), Convert.ToInt32(r[1]), Convert.ToInt32(r[2]), (string)r[3], r[4].ToString().Replace(',', '.'), });
        }

        public IList<object[]> BuildProjectListReport(ReportFilter filter)
        {
            IntersectUsersAndProjects(filter);
            IntersectTagsAndProjects(filter);

            var query = new SqlQuery("projects_projects p")
                .Select("p.id")
                .Select("p.title")
                .Select("p.responsible_id")
                .Select("p.status")
                .Select(new SqlQuery("projects_milestones m").SelectCount().Where(Exp.EqColumns("m.project_id", "p.id")))
                .Select(new SqlQuery("projects_tasks t").SelectCount().Where(Exp.EqColumns("t.project_id", "p.id")))
                .Select(new SqlQuery("projects_project_participant pp").SelectCount().Where(Exp.EqColumns("pp.project_id", "p.id")))
                .Select("p.private")
                .Where("p.tenant_id", Tenant)
                .OrderBy("p.title", true);

            if (filter.HasProjectStatuses)
            {
                query.Where(Exp.In("p.status", filter.ProjectStatuses));
            }
            if (filter.HasProjectIds)
            {
                query.Where(Exp.In("p.id", filter.ProjectIds));
            }

            return DbManager
                .ExecuteList(query)
                .ConvertAll(r => new object[] { Convert.ToInt32(r[0]), (string)r[1], ToGuid(r[2]), ToString((ProjectStatus)Convert.ToInt32(r[3])), (long)r[4], (long)r[5], (long)r[6], Convert.ToBoolean(r[7]), });
        }

        public IList<object[]> BuildProjectWithoutActiveTask(ReportFilter filter)
        {
            IntersectUsersAndProjects(filter);
            IntersectTagsAndProjects(filter);

            var query = new SqlQuery("projects_projects p")
                .LeftOuterJoin("projects_tasks t", Exp.EqColumns("p.id", "t.project_id"))
                .Select("p.id")
                .Where("p.tenant_id", Tenant)
                .GroupBy(1)
                .Having(Exp.Eq("sum(case t.status when 1 then 1 else 0 end)", 0));

            if (filter.HasProjectIds)
            {
                query.Where(Exp.In("p.id", filter.ProjectIds));
            }

            var ids = DbManager
                .ExecuteList(query)
                .ConvertAll(r => Convert.ToInt32(r[0]))
                .ToArray();

            filter.SetProjectIds(ids);

            return BuildProjectListReport(filter);
        }

        public IList<object[]> BuildProjectWithoutOpenMilestone(ReportFilter filter)
        {
            IntersectUsersAndProjects(filter);
            IntersectTagsAndProjects(filter);

            var query = new SqlQuery("projects_projects p")
                .LeftOuterJoin("projects_milestones m", Exp.EqColumns("p.id", "m.project_id"))
                .Select("p.id")
                .Where("p.tenant_id", Tenant)
                .GroupBy(1)
                .Having(Exp.Eq("sum(case m.status when 0 then 1 else 0 end)", 0));
            if (filter.HasProjectIds)
            {
                query.Where(Exp.In("p.id", filter.ProjectIds));
            }

            var ids = DbManager
                .ExecuteList(query)
                .ConvertAll(r => Convert.ToInt32(r[0]))
                .ToArray();

            filter.SetProjectIds(ids);

            return BuildProjectListReport(filter);
        }


        private void IntersectUsersAndProjects(ReportFilter filter)
        {
            if (filter.HasUserId)
            {
                var query = new SqlQuery("projects_project_participant")
                        .Select("project_id")
                        .Where(Exp.In("participant_id", filter.GetUserIds()))
                        .GroupBy(1);
                if (filter.HasProjectIds)
                {
                    query.Where(Exp.In("project_id", filter.ProjectIds));
                }

                var ids = DbManager
                     .ExecuteList(query)
                     .ConvertAll(r => Convert.ToInt32(r[0]))
                     .ToArray();

                filter.SetProjectIds(ids);
                filter.UserId = Guid.Empty;
                filter.DepartmentId = Guid.Empty;
            }
        }

        private void IntersectTagsAndProjects(ReportFilter filter)
        {
            if (!string.IsNullOrEmpty(filter.ProjectTag))
            {
                var query = new SqlQuery()
                    .From("projects_tags t")
                    .From("projects_project_tag p")
                    .Select("p.project_id")
                    .Where(Exp.EqColumns("t.id", "p.tag_id"))
                    .Where("t.tenant_id", Tenant)
                    .Where("lower(t.title)", filter.ProjectTag.ToLower());
                var ids = DbManager.ExecuteList(query).Select(r => Convert.ToInt32(r[0]));

                if (filter.HasProjectIds)
                {
                    filter.ProjectIds.AddRange(ids);
                }
                else
                {
                    filter.SetProjectIds(ids);
                }
                filter.ProjectTag = null;
            }
        }

        private ReportTemplate ToTemplate(object[] r)
        {
            var tenant = CoreContext.TenantManager.GetTenant(Convert.ToInt32(r[7]));
            var template = new ReportTemplate((ReportType)Convert.ToInt32(r[1]))
            {
                Id = Convert.ToInt32(r[0]),
                Name = (string)r[2],
                Filter = r[3] != null ? ReportFilter.FromXml((string)r[3]) : new ReportFilter(),
                Cron = (string)r[4],
                CreateBy = (string)r[5],
                CreateOn = TenantUtil.DateTimeFromUtc(tenant, (DateTime)r[6]),
                Tenant = tenant.TenantId,
                AutoGenerated = Convert.ToBoolean(r[8]),
            };
            return template;
        }

        private string ToString(Enum value)
        {
            if (value == null) return null;
            return LocalizedEnumConverter.ConvertToString(value);
        }
    }
}
