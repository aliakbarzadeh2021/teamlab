<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AutoupdateContactListDescription" xml:space="preserve">
    <value>The contact list is updated automatically as people are added/removed from the list of employees, so you don't have to check it out manually.  </value>
  </data>
  <data name="ChatTabs" xml:space="preserve">
    <value>Chat Tabs</value>
  </data>
  <data name="ContactListWithOptions" xml:space="preserve">
    <value>Contact List Options</value>
  </data>
  <data name="IntegrationWith3rdPartyAppsSectionContent" xml:space="preserve">
    <value>You may use a third-party desktop/mobile IM client to access Talk. To do that, you'll need to integrate Talk with any IM client that supports Jabber/XMPP.</value>
  </data>
  <data name="IntegrationWith3rdPartyAppsSectionTitle" xml:space="preserve">
    <value>Third-Party Software Support</value>
  </data>
  <data name="MessageFieldOptions" xml:space="preserve">
    <value>Message Field Options</value>
  </data>
  <data name="MirandaIMLink" xml:space="preserve">
    <value>Miranda IM - the Miranda IM client home page.  Smaller, Faster, Easier</value>
  </data>
  <data name="OverviewContent" xml:space="preserve">
    <value>Talk is a corporate IM system for exchanging instant text messages among the employees in real time.</value>
  </data>
  <data name="OverviewContentDescription" xml:space="preserve">
    <value>Talk offers all the traditional features you expect from a messenger - choice of status, history archiving, file transfer, multi-user chat support, and more.</value>
  </data>
  <data name="OverviewSectionTitle" xml:space="preserve">
    <value>Talk Overview</value>
  </data>
  <data name="OverviewWebClientDescription" xml:space="preserve">
    <value>Launch our web client to start using Talk right now with no prior settings. </value>
  </data>
  <data name="PidginLink" xml:space="preserve">
    <value>A free chat client used by millions. Connect easily to MSN, Google Talk, Yahoo, AIM and other chat networks all at once.</value>
  </data>
  <data name="PsiLink" xml:space="preserve">
    <value>The Cross-Platform JabberXMPP Client For Power Users</value>
  </data>
  <data name="Recommended" xml:space="preserve">
    <value>Recommended Clients</value>
  </data>
  <data name="ScreenshotsSectionTitle" xml:space="preserve">
    <value>Screenshots</value>
  </data>
  <data name="StartWebClientLink" xml:space="preserve">
    <value>Launch Web Client</value>
  </data>
  <data name="StartWebClientLinkDescription" xml:space="preserve">
    <value>No extra settings! Click to launch web client and start talking right now</value>
  </data>
  <data name="ThirdPartyAppsSettingsSectionContent" xml:space="preserve">
    <value>To get Talk integrate with a third-party client, you'll need the following settings:{0}
Server Name: {1}
Server Address: {2}
Connection Port: {3}
Your User Name: {4}
To connect you'll need to enter your Jabber ID {5} and password from your account.</value>
  </data>
  <data name="TrillianLink" xml:space="preserve">
    <value>Trillian - Windows, iPhone, and Web based instant messenger.  Supports Astra, Windows Live, Facebook, Twitter, Yahoo, MySpace, AIM, Email, Google Talk, Skype, ICQ, Jabber, IRC, Bonjour, and more!</value>
  </data>
  <data name="YourStatusChanger" xml:space="preserve">
    <value>Status Changer</value>
  </data>
</root>