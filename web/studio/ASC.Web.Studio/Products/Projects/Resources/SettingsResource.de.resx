<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AccessDenied">
    <value>Keine Berechtigung für Datenimport</value>
  </data>
  <data name="Close">
    <value>Fenster schließen</value>
  </data>
  <data name="CompanyURL">
    <value>Die URL des Unternehmens, z.B. {0}https://mycompany.basecamphq.com{1}</value>
  </data>
  <data name="DefaultTab">
    <value>Standardregisterkarte</value>
  </data>
  <data name="DefaultTabInfo">
    <value>Wählen Sie eine Registerkarte, die beim Start standardmäßig angezeigt wird.</value>
  </data>
  <data name="EmptyToken">
    <value>Das Feld "API Token" ist leer</value>
  </data>
  <data name="EmptyURL">
    <value>Das URL-Feld ist leer </value>
  </data>
  <data name="FailedToSaveComment">
    <value>Speichern des Kommentars "{0}" fehlgeschlagen</value>
  </data>
  <data name="FailedToSaveFile">
    <value>Unmöglich Datei {0} hochzuladen</value>
  </data>
  <data name="FailedToSaveFileCategory">
    <value>Speichern der Dateikategorie "{0}" fehlgeschlagen</value>
  </data>
  <data name="FailedToSaveMessage">
    <value>Speichern der Nachricht "{0}" fehlgeschlagen</value>
  </data>
  <data name="FailedToSaveMilestone">
    <value>Speichern des Meilensteins "{0}" fehlgeschlagen</value>
  </data>
  <data name="FailedToSaveProject">
    <value>Speichern des Projekts "{0}" fehlgeschlagen</value>
  </data>
  <data name="FailedToSaveTask">
    <value>Speichern der Aufgabe "{0}" fehlgeschlagen</value>
  </data>
  <data name="FailedToSaveTimeSpend">
    <value>Speichern der Zeitangabe "{0}" fehlgeschlagen</value>
  </data>
  <data name="FailedToSaveUser">
    <value>Speichern des Benutzers "{0}" fehlgeschlagen</value>
  </data>
  <data name="Files">
    <value>Dateien</value>
  </data>
  <data name="ImportAttantionPanelAgreement">
    <value>Ja, ich verstehe es</value>
  </data>
  <data name="ImportAttantionPanelBody">
    <value>Alle Basecamp-Projekte werden in TeamLab als private Projekte importiert. Diese Projekte werden nur für die Portaladministratoren zugänglich sein. Die Projektleiter und Mitglieder des Projektteams werden Zugriff nur auf die entsprechenden Projekte erhalten.</value>
  </data>
  <data name="ImportAttantionPanelTitle">
    <value>Warnung!</value>
  </data>
  <data name="ImportClosedTasks">
    <value>Geschlossene Aufgaben und Projekte importieren</value>
  </data>
  <data name="ImportCompleted">
    <value>Importierung abgeschlossen</value>
  </data>
  <data name="ImportFailed">
    <value>Fehler beim Importieren</value>
  </data>
  <data name="ImportFileStarted">
    <value>Importbeginn der Dateien {0} von allen Projekten</value>
  </data>
  <data name="ImportFromBasecamp">
    <value>Von Basecamp importieren</value>
  </data>
  <data name="ImportInfo_Attention">
    <value>Bitte beachten Sie, dass alle Daten, die von Ihrem Basecamp-Konto importiert wurden, automatisch freigegeben und für alle Portalbenutzer zugänglich werden, weil TeamLab keine Zugangseinschränkungen bietet.</value>
  </data>
  <data name="ImportInfo_Attention_PopUp">
    <value>Warnung! Nach der Importierung werden alle Mitglieder Ihres Portals einen Zugang auf ALLE Daten aus Ihrem Basecamp-Konto erhalten. Möchten Sie fortsetzen?</value>
  </data>
  <data name="ImportInfo_Notyfy">
    <value>Alle Mitglieder Ihres Portals werden eine Einladung zu TeamLab per E-Mail erhalten. </value>
  </data>
  <data name="ImportInfoPanelContent">
    <value>Importierung...</value>
  </data>
  <data name="ImportProjectDataStarted">
    <value>Import der Projektdaten "{0}" begonnen</value>
  </data>
  <data name="ImportProjectsFromTheBaseCamp">
    <value>Importieren Sie Projekte von Basecamp</value>
  </data>
  <data name="ImportProjectStarted">
    <value>Import des Projekts "{0}" begonnen</value>
  </data>
  <data name="ImportStarted">
    <value>Import begonnen</value>
  </data>
  <data name="InfoModuleSettings">
    <value>Hier kann man einige Module von Projects sperren</value>
  </data>
  <data name="InfoToken">
    <value>Daten für den Basecamp-Zugriff werden nur für eine einmalige Importierung benutzt und im System nicht gespeichert</value>
  </data>
  <data name="InfoURL">
    <value>Stellen Sie sicher, dass {0}Basecamp API{1} bei den Einstellungen auf Ihrer Basecamp-Website aktiviert ist</value>
  </data>
  <data name="MalformedUrl">
    <value>Die eingegebene URL-Adresse ist falsch</value>
  </data>
  <data name="ModuleSettings">
    <value>Moduleinstellungen</value>
  </data>
  <data name="MoreErrors">
    <value>Weitere Fehler</value>
  </data>
  <data name="NotBasecampUrl">
    <value>Die eingegebene URL ist keine Basecamp-URL</value>
  </data>
  <data name="OutOfThree">
    <value>von 3</value>
  </data>
  <data name="People">
    <value>Mitarbeiter</value>
  </data>
  <data name="PleaseWait">
    <value>Bitte warten, bis der wichtigste Teil importiert ist</value>
  </data>
  <data name="PopupPanelBody">
    <value>Es wird empfohlen, keine Änderungen an Ihrem Portal vorzunehmen,{0}
                          während Mitarbeiter und Projekte importiert werden.{0}{0}
                          Man kann dieses Fenster schließen und an Ihrem TeamLab-Portal weiter arbeiten,{0}
                          sobald die Importierung der Sektion "Dateien" beginnt.</value>
  </data>
  <data name="PopupPanelHeader">
    <value>Importierung von Basecamp</value>
  </data>
  <data name="Projects">
    <value>Projekte</value>
  </data>
  <data name="SendInvitations">
    <value>E-Mail-Einladung zu TeamLab an alle Portalmitglieder senden</value>
  </data>
  <data name="Settings">
    <value>Einstellungen</value>
  </data>
  <data name="StartImport">
    <value>Importierung beginnen</value>
  </data>
  <data name="StatusAwaiting">
    <value>in Erwartung</value>
  </data>
  <data name="StatusImporting">
    <value>Importierung</value>
  </data>
  <data name="UserToken">
    <value>Ihr API Token von Basecamp</value>
  </data>
  <data name="ViewCalendar">
    <value>Modul "Kalender" anzeigen</value>
  </data>
  <data name="ViewDetails">
    <value>Details anzeigen</value>
  </data>
  <data name="ViewFiles">
    <value>Modul "Dateien" anzeigen</value>
  </data>
  <data name="ViewIssueTracker">
    <value>Modul "Probleme" anzeigen</value>
  </data>
  <data name="ViewTimeTracking">
    <value>Modul "Zeitaufwendung" anzeigen</value>
  </data>
  <data name="YesStartImport">
    <value>Ja, Importierung beginnen</value>
  </data>
</root>