using System;
using System.Text.RegularExpressions;
using System.Collections.Generic;
using System.Configuration;
using System.Data;
using System.Web;
using System.Web.Security;
using System.Web.UI;
using System.Web.UI.HtmlControls;
using System.Web.UI.WebControls;
using System.Web.UI.WebControls.WebParts;

using ASC.Core;
using ASC.Core.Tenants;
using ASC.Core.Users;
using ASC.Projects.Core.Domain;
using ASC.Projects.Core.Domain.Reports;
using ASC.Web.Controls;
using ASC.Web.Core.Users;
using ASC.Web.Core.Utility.Skins;
using ASC.Web.Projects.Classes;
using ASC.Web.Projects.Configuration;
using ASC.Web.Projects.Controls.Reports;
using ASC.Web.Projects.Resources;
using ASC.Web.Studio.Controls.Common;
using ASC.Web.Studio.Utility;
using System.Globalization;
using System.Threading;
using AjaxPro;
using ASC.Notify.Cron;
using ASC.Projects.Engine;

namespace ASC.Web.Projects.Controls
{
    [AjaxNamespace("AjaxPro.Templates")]
    public partial class TemplateList : System.Web.UI.UserControl
    {
        #region Properties

        public bool HasData { get; set; } 

        #endregion

        #region Events

        protected void Page_Load(object sender, EventArgs e)
        {
            AjaxPro.Utility.RegisterTypeForAjax(typeof(TemplateList));
            List<ReportTemplate> Templates = Global.EngineFactory.GetReportEngine().GetTemplates(SecurityContext.CurrentAccount.ID);

            if (UrlParameters.ActionType == "autogenerate")
            {
                Templates = Templates.FindAll(t => t.AutoGenerated);
            }

            EmptyScreenControl emptyScreenControl = new EmptyScreenControl();
            emptyScreenControl.HeaderContent = ReportResource.Empty;
            emptyScreenControl.HeaderDescribe = String.Empty;
            plhEmptyScreen.Controls.Add(emptyScreenControl);

            if (Templates.Count > 0)
            {
                repeaterTemplateList.DataSource = Templates;
                plhTemplateActionButtons.Visible = true;
                HasData = true;
            }
            else
            {
                repeaterTemplateList.DataSource = null;
                plhTemplateActionButtons.Visible = false;
                HasData = false;
            }

            repeaterTemplateList.DataBind();

        }

        #endregion

        #region Methods

        [AjaxMethod]
        public object DeleteTemplates(int[] TemplateIds)
        {
            ProjectSecurity.DemandAuthentication();
            
            foreach (int tId in TemplateIds)
            {
                Global.EngineFactory.GetReportEngine().DeleteTemplate(tId);
            }
            return TemplateIds;
        }

        public CronFields GetCronFields(string Cron)
        {
            int periodItem, hour;
            periodItem = -1;
            hour = -1;
            Regex Per0 = new Regex(@"0 0 [0-9]* \* \* \?");
            Regex Per1 = new Regex(@"0 0 [0-9]* \? \* [0-9]*");
            Regex Per2 = new Regex(@"0 0 [0-9]* [0-9]* \* \?");

            if (Per0.IsMatch(Cron))
            {
                Regex RegPerItem = new Regex(@"0 0 ([0-9]*) \* \* \?");
                if (RegPerItem.Match(Cron).Success)
                    int.TryParse(RegPerItem.Match(Cron).Groups[1].ToString(), out periodItem);

                return new CronFields
                {
                    period = 0,
                    periodItem = periodItem,
                    hour = -1
                };

            }
            else if (Per1.IsMatch(Cron))
            {
                Regex RegPerItem = new Regex(@"0 0 ([0-9]*) \? \* ([0-9]*)");
                if (RegPerItem.Match(Cron).Success)
                {
                    int.TryParse(RegPerItem.Match(Cron).Groups[1].ToString(), out hour);
                    int.TryParse(RegPerItem.Match(Cron).Groups[2].ToString(), out periodItem);
                }

                return new CronFields
                {
                    period = 1,
                    periodItem = periodItem,
                    hour = hour
                };

            }
            else if (Per2.IsMatch(Cron))
            {
                Regex RegPerItem = new Regex(@"0 0 ([0-9]*) ([0-9]*) \* \?");
                if (RegPerItem.Match(Cron).Success)
                {
                    int.TryParse(RegPerItem.Match(Cron).Groups[1].ToString(), out hour);
                    int.TryParse(RegPerItem.Match(Cron).Groups[2].ToString(), out periodItem);
                }
                return new CronFields
                {
                    period = 2,
                    periodItem = periodItem,
                    hour = hour
                };

            }
            return new CronFields
            {
                period = -1,
                periodItem = -1,
                hour = -1
            };
        }

        public string GetEditImageSrc()
        {
            return WebImageSupplier.GetAbsoluteWebPath("edit_small.png", ProductEntryPoint.ID);
        }

        [AjaxMethod]
        public string GetAutugeneratedTime(string cronString)
        {
            ProjectSecurity.DemandAuthentication();

            var cron = new CronExpression(cronString) { TimeZone = CoreContext.TenantManager.GetCurrentTenant().TimeZone };
            var date = cron.GetTimeAfter(DateTime.UtcNow);
            return date.HasValue ? string.Format("@ {0}", TenantUtil.DateTimeFromUtc(date.Value).ToShortString()) : string.Empty;
        }

        public string GetTemplateName(string name)
        {
            return name.ReplaceSingleQuote().Replace(@"\", @"\\");
        }

        #endregion
    }
}